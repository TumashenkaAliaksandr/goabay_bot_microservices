from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, filters, ConversationHandler
import requests
import logging

API_KEY = "–≤–∞—à_–∫–ª—é—á_–∞–≤–∏–∞—Å–µ–π–ª—Å"  # –í–∞—à API-–∫–ª—é—á Aviasales
BASE_URL = "https://api.travelpayouts.com/v1/prices/cheap"  # API-–∞–¥—Ä–µ—Å

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –≠—Ç–∞–ø—ã –¥–ª—è ConversationHandler
ORIGIN, DESTINATION, DEPART_DATE, RETURN_DATE, PASSENGERS, FLIGHT_CLASS = range(6)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
def get_cheap_tickets(origin, destination, depart_date, return_date, passengers, flight_class, currency="rub"):
    params = {
        "origin": origin,
        "destination": destination,
        "depart_date": depart_date,
        "return_date": return_date,
        "currency": currency,
        "token": API_KEY,
        "passengers": passengers,
        "flight_class": flight_class,
    }
    try:
        response = requests.get(BASE_URL, params=params, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        return f"‚ìò –û—à–∏–±–∫–∞ API: {e}"

    data = response.json()
    if data.get("success"):
        tickets = data.get("data", {}).get(destination, {})
        result = [
            f"üõ´ –†–µ–π—Å: {flight}\nüí≤ –¶–µ–Ω–∞: {details['price']} {currency}\n–°—Å—ã–ª–∫–∞: {details.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}"
            for flight, details in tickets.items()
        ]
        return "\n\n".join(result) if result else "üé´ –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        return f"–û—à–∏–±–∫–∞: {data.get('error', '‚ìò –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üèô üõ´  –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ORIGIN

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
async def get_origin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["origin"] = update.message.text.strip().upper()
    await update.message.reply_text("üèô ü™Ç  –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞:")
    return DESTINATION

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞
async def get_destination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["destination"] = update.message.text.strip().upper()
    await update.message.reply_text("üìÖ üó∫Ô∏è‚ÅÄ‡™ú‚úà –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return DEPART_DATE

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞
async def get_depart_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["depart_date"] = update.message.text.strip()
    await update.message.reply_text("üìÖ üó∫Ô∏è‚ÅÄ‡™ú‚úà –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    return RETURN_DATE

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
async def get_return_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return_date = None if update.message.text.lower() == "–Ω–µ—Ç" else update.message.text.strip()
    context.user_data["return_date"] = return_date
    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:")
    return PASSENGERS

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
async def get_passengers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    passengers = update.message.text.strip()
    if not passengers.isdigit() or int(passengers) <= 0:
        await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
        return PASSENGERS
    context.user_data["passengers"] = passengers
    await update.message.reply_text("üî∞ –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å:\nü™ë –≠–∫–æ–Ω–æ–º –∏–ª–∏ üí∫ –ë–∏–∑–Ω–µ—Å:")
    return FLIGHT_CLASS

# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä–µ–ª–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
async def get_flight_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if "—ç–∫–æ–Ω–æ–º" in text:
        flight_class = "economy"
    elif "–±–∏–∑–Ω–µ—Å" in text:
        flight_class = "business"
    else:
        await update.message.reply_text("üî∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\nü™ë '–≠–∫–æ–Ω–æ–º' –∏–ª–∏ üí∫ '–ë–∏–∑–Ω–µ—Å'.")
        return FLIGHT_CLASS

    context.user_data["flight_class"] = flight_class

    # –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤
    data = context.user_data
    tickets = get_cheap_tickets(
        origin=data["origin"],
        destination=data["destination"],
        depart_date=data["depart_date"],
        return_date=data["return_date"],
        passengers=data["passengers"],
        flight_class=data["flight_class"],
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    aviasales_url = f"https://www.aviasales.ru/search/{data['origin']}{data['destination']}{data['depart_date'].replace('-', '')}"
    keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üëå", url=aviasales_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"‚ôªÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{tickets}", reply_markup=reply_markup)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ìò –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω. ‚õî", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
