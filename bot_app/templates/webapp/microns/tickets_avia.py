from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, ConversationHandler
import requests
import logging

from bot_app.templates.webapp.answers.info_back import messages_to_delete
from bot_app.templates.webapp.buttons.buttons_store import profile_avia_btn
from bot_app.templates.webapp.text_files_py_txt import register_avia_handler

API_KEY = "–≤–∞—à_–∫–ª—é—á_–∞–≤–∏–∞—Å–µ–π–ª—Å"  # –í–∞—à API-–∫–ª—é—á Aviasales
BASE_URL = "https://api.travelpayouts.com/v1/prices/cheap"  # API-–∞–¥—Ä–µ—Å

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –≠—Ç–∞–ø—ã –¥–ª—è ConversationHandler
ORIGIN, DESTINATION, DEPART_DATE, RETURN_DATE, PASSENGERS, CHILDREN_ASK, CHILDREN_INFO, CHILDREN_AGE, FLIGHT_CLASS = range(9)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
def get_cheap_tickets(origin, destination, depart_date, return_date, passengers, flight_class, children_info=None, currency="rub"):
    params = {
        "origin": origin,
        "destination": destination,
        "depart_date": depart_date,
        "return_date": return_date,
        "currency": currency,
        "token": API_KEY,
        "passengers": passengers,
        "flight_class": flight_class,
    }
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö
    if children_info:
        params["children"] = children_info

    try:
        response = requests.get(BASE_URL, params=params, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        return f"‚ìò –û—à–∏–±–∫–∞ API: {e}"

    data = response.json()
    if data.get("success"):
        tickets = data.get("data", {}).get(destination, {})
        result = [
            f"üõ´ –†–µ–π—Å: {flight}\nüí≤ –¶–µ–Ω–∞: {details['price']} {currency}\n–°—Å—ã–ª–∫–∞: {details.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}"
            for flight, details in tickets.items()
        ]
        return "\n\n".join(result) if result else "üé´ –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        return f"–û—à–∏–±–∫–∞: {data.get('error', '‚ìò –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(register_avia_handler.city_fly_up, parse_mode='MarkdownV2', reply_markup=ReplyKeyboardRemove())
    return ORIGIN

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
async def get_origin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["origin"] = update.message.text.strip().upper()
    await update.message.reply_text(register_avia_handler.city_fly_down, parse_mode='MarkdownV2')
    return DESTINATION

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞
async def get_destination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["destination"] = update.message.text.strip().upper()
    await update.message.reply_text(register_avia_handler.date_fly_up, parse_mode='MarkdownV2')
    return DEPART_DATE

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞
async def get_depart_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["depart_date"] = update.message.text.strip()
    await update.message.reply_text(register_avia_handler.date_fly_down, parse_mode='MarkdownV2')
    return RETURN_DATE

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
async def get_return_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return_date = None if update.message.text.lower() == "–Ω–µ—Ç" else update.message.text.strip()
    context.user_data["return_date"] = return_date
    await update.message.reply_text(register_avia_handler.quantity_peoples_for_fly, parse_mode='MarkdownV2')
    return PASSENGERS

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
async def get_passengers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    passengers = update.message.text.strip()
    if not passengers.isdigit() or int(passengers) <= 0:
        await update.message.reply_text(register_avia_handler.correct_quantity_peoples_for_fly, parse_mode='MarkdownV2')
        return PASSENGERS
    context.user_data["passengers"] = passengers
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏?", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data='children_yes'), InlineKeyboardButton("–ù–µ—Ç", callback_data='children_no')]
    ]))
    return CHILDREN_ASK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (–î–∞/–ù–µ—Ç)
async def handle_children_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "children_yes":
        await query.edit_message_text(register_avia_handler.children_yes_answer, parse_mode='MarkdownV2')
        return CHILDREN_INFO
    elif query.data == "children_no":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å –¥–µ—Ç—å–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        context.user_data["children_info"] = None
        await query.edit_message_text(register_avia_handler.class_business_eco, parse_mode='MarkdownV2')
        return FLIGHT_CLASS

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö
async def process_children_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    children_info = update.message.text.strip()
    try:
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: "2: 5, 8"
        children_list = [int(age.strip()) for age in children_info.split(":")[1].split(",")]
        context.user_data["children_info"] = children_list
        await update.message.reply_text(register_avia_handler.class_business_eco, parse_mode='MarkdownV2')
        return FLIGHT_CLASS
    except Exception:
        await update.message.reply_text(register_avia_handler.children_age, parse_mode='MarkdownV2')
        return CHILDREN_INFO

# –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π
async def get_children_ages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    children_ages = update.message.text.strip()
    try:
        # –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '5, 8' –¥–ª—è –¥–µ—Ç–µ–π 5 –∏ 8 –ª–µ—Ç
        children_ages_list = [int(age.strip()) for age in children_ages.split(",")]
        context.user_data["children_ages"] = children_ages_list
        await update.message.reply_text(register_avia_handler.class_business_eco, parse_mode='MarkdownV2')
        return FLIGHT_CLASS
    except Exception:
        await update.message.reply_text(register_avia_handler.children_age_please, parse_mode='MarkdownV2')
        return CHILDREN_AGE

# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä–µ–ª–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
async def get_flight_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if "—ç–∫–æ–Ω–æ–º" in text:
        flight_class = "economy"
    elif "–±–∏–∑–Ω–µ—Å" in text:
        flight_class = "business"
    else:
        await update.message.reply_text(register_avia_handler.class_business_eco, parse_mode='MarkdownV2')
        return FLIGHT_CLASS

    context.user_data["flight_class"] = flight_class

    # –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤
    data = context.user_data
    tickets = get_cheap_tickets(
        origin=data["origin"],
        destination=data["destination"],
        depart_date=data["depart_date"],
        return_date=data["return_date"],
        passengers=data["passengers"],
        flight_class=data["flight_class"],
        children_info=data.get("children_info"),
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    aviasales_url = f"https://www.aviasales.ru/search/{data['origin']}{data['destination']}{data['depart_date'].replace('-', '')}"
    keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üëå", url=aviasales_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    get_avia_inf_tickets = await update.message.reply_text('üôå –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
                                                           reply_markup=profile_avia_btn)
    messages_to_delete.append(get_avia_inf_tickets)

    await update.message.reply_text(f"‚ôªÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{tickets}", reply_markup=reply_markup)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ìò –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω. ‚õî", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END