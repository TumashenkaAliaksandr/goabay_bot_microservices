import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot_app.models import Product
from bot_app.templates.webapp.buttons.buttons import create_reply_sklad_btn


from asgiref.sync import sync_to_async


async def show_products_by_brand(update, context, slug):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞

    logging.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–ª–∞–≥–æ–º: {slug}")

    try:
        product = await sync_to_async(Product.objects.get)(slug=slug)
        logging.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.name}")
    except Product.DoesNotExist:
        logging.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–ª–∞–≥–∞: {slug}")
        await query.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    category_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
    if await sync_to_async(product.category.exists)():
        category = await sync_to_async(product.category.first)()
        category_name = category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'

    product_list = (
        f"<b>–ò–º—è:</b> {product.name}\n"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {product.brand}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
        f"<b>–¶–µ–Ω–∞:</b> {product.price}‚ÇΩ\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.desc}\n"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_categories")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    quantity = context.user_data.get("quantity", 1)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sklad_btn = create_reply_sklad_btn(
        quantity)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if product.image:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            with open(product.image.path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=photo,
                    caption=product_list,
                    parse_mode='HTML',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    reply_markup=InlineKeyboardMarkup([
                        [back_button],  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                        *sklad_btn.inline_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑ sklad_btn
                    ])
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
