import logging

from asgiref.sync import sync_to_async

from bot_app.models import UserRegistration
from bot_app.templates.webapp.buttons.inline_category_store_btn import show_categories, \
    show_incense_options, show_motorcycle_options, category_incense_options, category_motorcycle_options
from bot_app.templates.webapp.microns.moto_shows_products_brands import show_products_by_brand
from bot_app.templates.webapp.profile.registrations_store import registration_handler, STEP_EDIT_NAME
from bot_app.templates.webapp.buttons.buttons import reply_markup_pay, back_button_go, \
    order_calculation_pay, back_button_cal, back_qw_answ_button_main, qw_answ_btn_main, \
    back_gifts_button_main, gifts_btn_main, create_reply_sklad_btn
from bot_app.templates.webapp.cart import Cart
from bot_app.templates.webapp.text_files_py_txt.calculator_info_pay import calculator_info
from bot_app.templates.webapp.text_files_py_txt.info_pay import payment_info
from bot_app.templates.webapp.text_files_py_txt.qwe_answ import qwe_answer_info
from bot_app.templates.webapp.text_files_py_txt.sales_info import sales_info
from telegram import Update
from bot_app.templates.webapp.buttons.buttons_store import *
from telegram.ext import CallbackContext, ContextTypes, ConversationHandler

cart = Cart()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if query.data == 'edit_data':
        await query.edit_message_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.")
        context.user_data['step'] = None  # –°–±—Ä–æ—Å —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await registration_handler(update, context)
        return

    elif query.data == 'confirm_data':
        await query.edit_message_text("‚úîÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
        await query.edit_message_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: üç≥', reply_markup=profile_btn)
        context.user_data.clear()
        return

    payment_method = query.data

    if payment_method in payment_info:
        text, photo_path = payment_info[payment_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_button_go  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_pay':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await query.message.reply_text("üí∞ –û–ø–ª–∞—Ç–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É.\n\n"
                                       "üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üèß C–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup_pay)
        return

    # –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç–æ–¥—ã
    calculator_method = query.data

    if calculator_method in calculator_info:
        text, photo_path = calculator_info[calculator_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_button_cal  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_calculator':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        await query.message.reply_text('üìä –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n'
                                        'üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üßÆ –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞',
                                        reply_markup=order_calculation_pay)
        return

    # –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç
    qwe_answer_method = query.data

    if qwe_answer_method in qwe_answer_info:
        text, photo_path = qwe_answer_info[qwe_answer_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_qw_answ_button_main # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_qwe_answer':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        await query.message.reply_text('‚ÅâÔ∏è –í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç.\n\n'
                                       'üëá –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                                       reply_markup=qw_answ_btn_main)
        return

    if query.data == "delete_item":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    elif query.data == "pay_item":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    if query.data == "end_registration":
        await query.message.reply_text('üöß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚õî ', reply_markup=main_markup)
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        await query.edit_message_reply_markup(reply_markup=None)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
        return ConversationHandler.END
    if query.data == "start_registration":
        await registration_handler(update, context)

    elif query.data == "category_motorcycles":
        await category_motorcycle_options(update, context)
    if query.data == "motorcycle_indian":
        await show_motorcycle_options(update, context)
    elif query.data == "back_to_categories":
        await show_categories(update, context)
    elif query.data.startswith("motorcycle_"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–ª–±—ç–∫ —Å "motorcycle_"
        slug = query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–∞–≥
        logging.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–ª–∞–≥–æ–º: {slug}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–ª–∞–≥
        await show_products_by_brand(update, context, slug)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–∞–≥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

    elif query.data == "category_incense":
        await category_incense_options(update, context)
    if query.data == "aromo_indian":
        await show_incense_options(update, context)
    elif query.data.startswith("incense_"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–ª–±—ç–∫ —Å "incense_"
        slug = query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–∞–≥
        logging.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–ª–∞–≥–æ–º: {slug}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–ª–∞–≥

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–ª–∞–≥–∞
        if not slug.isalnum():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å–ª–∞–≥ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
            error_message = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            try:
                await query.edit_message_text(error_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        await show_products_by_brand(update, context, slug)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–∞–≥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    # –ê–∫—Ü–∏–∏
    gifts_method = query.data

    if gifts_method in sales_info:
        print(sales_info[gifts_method])
        text, photo_path = sales_info[gifts_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_gifts_button_main  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_gifts':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É üéÅ –ü–æ–¥–∞—Ä–∫–∏
        await query.message.reply_text('üéÅ –ü–æ–¥–∞—Ä–∫–∏\n\n'
                                       'üëá –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                                       reply_markup=gifts_btn_main)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ user_data
    if "quantity" not in context.user_data:
        context.user_data["quantity"] = 1

    # # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    # quantity = context.user_data["quantity"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    if query.data == "add_to_cart":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        product_id = context.user_data.get("product_id")  # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ user_data
        quantity = context.user_data.get("quantity", 1)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        product_data = context.user_data.get("product")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not product_data:
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        product_name = product_data.get("name")
        if not product_name:
            await query.answer("–û—à–∏–±–∫–∞: —É —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.add_item(quantity, product_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
        await query.answer(f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: {quantity} —à—Ç.")

    elif query.data == "increase_quantity":
        context.user_data["quantity"] += 1
        if query.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await query.edit_message_reply_markup(
                    reply_markup=create_reply_sklad_btn(context.user_data["quantity"]))
            except Exception as e:
                print(f"Error editing message: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞

    elif query.data == "decrease_quantity":
        if context.user_data["quantity"] > 1:  # –ß—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ 1
            context.user_data["quantity"] -= 1
            if query.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    await query.edit_message_reply_markup(
                        reply_markup=create_reply_sklad_btn(context.user_data["quantity"]))
                except Exception as e:
                    print(f"Error editing message: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞

    #     # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    #
    # error_message = "ü§∑‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç —è –≤ –±–∞—Ç—Ç–æ–Ω —Ö–µ–Ω–¥–ª–µ—Ä–µ, –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    #
    # try:
    #
    #     await query.edit_message_text(error_message)
    #
    # except Exception as e:

        print(f"Error editing message: {e}")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print(context.user_data["quantity"])


async def cancel_registration_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await query.answer()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await query.message.reply_text('üöß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚õî', reply_markup=main_markup)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    await query.edit_message_reply_markup(reply_markup=None)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
    return ConversationHandler.END


async def edit_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    new_name = update.message.text

    try:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–æ–≤–æ–µ –∏–º—è: {new_name}.")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(UserRegistration.objects.filter(user_id=user_id).update)(name=new_name)

        await update.message.reply_text("–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return ConversationHandler.END

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ edit_name_handler: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

