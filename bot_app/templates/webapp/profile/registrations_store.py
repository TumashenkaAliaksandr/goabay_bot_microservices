from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from bot_app.models import UserRegistration  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å UserRegistration
from asgiref.sync import sync_to_async
from bot_app.templates.webapp.profile.profile_date import show_user_info, profile_button_handler
from bot_app.templates.webapp.text_files_py_txt.reg_answer import reg_info

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
STEP_EDIT_NAME = 1
STEP_EDIT_EMAIL = 2
STEP_EDIT_PHONE = 3


# async def registration_handler(update: Update, context: CallbackContext) -> int:
#     if update.callback_query:
#         query = update.callback_query
#         await query.answer()
#         user_id = query.from_user.id
#         message_text = query.data
#     else:
#         user_id = update.message.from_user.id
#         message_text = update.message.text
#
#     print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{message_text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
#
#     # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#     registrations = await sync_to_async(list)(UserRegistration.objects.filter(user_id=user_id))
#
#     try:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
#         if message_text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§":
#             if registrations:
#                 registration = registrations[0]
#                 if registration.is_registered:
#                     await show_user_info(update, context)
#                     return ConversationHandler.END
#
#             # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#             keyboard = [
#                 [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")],
#                 [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="end_registration")],
#             ]
#             reply_markup = InlineKeyboardMarkup(keyboard)
#
#             await update.message.reply_text(
#                 reg_info, parse_mode='MarkdownV2',
#                 reply_markup=reply_markup,
#             )
#             return ConversationHandler.END
#
#         # –®–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#         step = context.user_data.get('step', STEP_EDIT_NAME)
#
#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
#         print(f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step}")
#
#         # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if step == STEP_EDIT_NAME:
#             print("–®–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#             await context.bot.send_message(chat_id=update.effective_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#             context.user_data['step'] = STEP_EDIT_NAME  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥
#             return STEP_EDIT_NAME
#
#         # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
#         elif step == STEP_EDIT_NAME:
#             print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {message_text}")  # –õ–æ–≥
#             if not message_text.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
#                 await context.bot.send_message(chat_id=user_id, text="–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#                 return STEP_EDIT_NAME
#
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             registration, created = await sync_to_async(UserRegistration.objects.get_or_create)(user_id=user_id)
#             registration.name = message_text.strip()
#             await sync_to_async(registration.save)()
#
#             print(f"[DEBUG] –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {registration.name}")  # –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
#             await context.bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
#
#             # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ email
#             context.user_data['step'] = STEP_EDIT_EMAIL
#             print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_EMAIL}")
#             return STEP_EDIT_EMAIL
#
#         # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
#         elif step == STEP_EDIT_EMAIL:
#             print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω email: {message_text}")  # –õ–æ–≥
#             if '@' not in message_text or '.' not in message_text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
#                 await context.bot.send_message(chat_id=user_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#                 return STEP_EDIT_EMAIL
#
#             registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
#             registration.email = message_text.strip()
#             await sync_to_async(registration.save)()
#             await context.bot.send_message(chat_id=user_id, text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
#
#             # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
#             context.user_data['step'] = STEP_EDIT_PHONE
#             print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_PHONE}")
#             return STEP_EDIT_PHONE
#
#         # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#         elif step == STEP_EDIT_PHONE:
#             print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {message_text}")  # –õ–æ–≥
#             if not message_text.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã
#                 await context.bot.send_message(chat_id=user_id,
#                                                text="–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#                 return STEP_EDIT_PHONE
#
#             registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
#             registration.phone = message_text.strip()
#             registration.is_registered = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#             await sync_to_async(registration.save)()
#             await context.bot.send_message(chat_id=user_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
#
#             # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
#             context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             print("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # –õ–æ–≥
#             return ConversationHandler.END
#
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞: {e}")
#         await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#     return ConversationHandler.END


async def registration_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    message_text = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –∫–Ω–æ–ø–∫–∏
    if message_text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
        if registration and registration.is_registered:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            await profile_button_handler(update, context)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await context.bot.send_message(chat_id=user_id, text=reg_info, parse_mode='MarkdownV2')
        context.user_data['step'] = STEP_EDIT_NAME  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        await context.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return STEP_EDIT_NAME  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    step = context.user_data.get('step', STEP_EDIT_NAME)

    print(f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step}")

    # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
    if step == STEP_EDIT_NAME:
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {message_text}")
        if not message_text.strip():  # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ
            await context.bot.send_message(chat_id=user_id, text="–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STEP_EDIT_NAME

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration, created = await sync_to_async(UserRegistration.objects.get_or_create)(user_id=user_id)
        registration.name = message_text.strip()
        await sync_to_async(registration.save)()

        print(f"[DEBUG] –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {registration.name}")  # –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        await context.bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ email
        context.user_data['step'] = STEP_EDIT_EMAIL  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_EMAIL}")
        return STEP_EDIT_EMAIL

    # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
    elif step == STEP_EDIT_EMAIL:
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω email: {message_text}")  # –õ–æ–≥
        if '@' not in message_text or '.' not in message_text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
            await context.bot.send_message(chat_id=user_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STEP_EDIT_EMAIL

        registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
        registration.email = message_text.strip()
        await sync_to_async(registration.save)()
        await context.bot.send_message(chat_id=user_id, text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        context.user_data['step'] = STEP_EDIT_PHONE
        print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_PHONE}")
        return STEP_EDIT_PHONE

    # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif step == STEP_EDIT_PHONE:
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {message_text}")  # –õ–æ–≥
        if not message_text.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã
            await context.bot.send_message(chat_id=user_id,
                                           text="–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STEP_EDIT_PHONE

        registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
        registration.phone = message_text.strip()
        registration.is_registered = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await sync_to_async(registration.save)()
        await context.bot.send_message(chat_id=user_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # –õ–æ–≥
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await profile_button_handler(update, context)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        return ConversationHandler.END

    return ConversationHandler.END



# async def registration_handler(update: Update, context: CallbackContext) -> int:
#     user_id = update.message.from_user.id
#     message_text = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –∫–Ω–æ–ø–∫–∏
#     if message_text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§':
#         await context.bot.send_message(chat_id=user_id, text=reg_info, parse_mode='MarkdownV2')
#         context.user_data['step'] = STEP_EDIT_NAME  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
#         await context.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#         return STEP_EDIT_NAME  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
#
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
#     step = context.user_data.get('step', STEP_EDIT_NAME)
#
#     print(f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step}")
#
#     # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
#     if step == STEP_EDIT_NAME:
#         print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {message_text}")
#         if not message_text.strip():  # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ
#             await context.bot.send_message(chat_id=user_id, text="–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#             return STEP_EDIT_NAME
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         registration, created = await sync_to_async(UserRegistration.objects.get_or_create)(user_id=user_id)
#         registration.name = message_text.strip()
#         await sync_to_async(registration.save)()
#
#         print(f"[DEBUG] –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {registration.name}")  # –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
#         await context.bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ email
#         context.user_data['step'] = STEP_EDIT_EMAIL  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
#         print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_EMAIL}")
#         return STEP_EDIT_EMAIL
#
#     # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
#     elif step == STEP_EDIT_EMAIL:
#         print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω email: {message_text}")  # –õ–æ–≥
#         if '@' not in message_text or '.' not in message_text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
#             await context.bot.send_message(chat_id=user_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#             return STEP_EDIT_EMAIL
#
#         registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
#         registration.email = message_text.strip()
#         await sync_to_async(registration.save)()
#         await context.bot.send_message(chat_id=user_id, text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
#         context.user_data['step'] = STEP_EDIT_PHONE
#         print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {STEP_EDIT_PHONE}")
#         return STEP_EDIT_PHONE
#
#     # –®–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#     elif step == STEP_EDIT_PHONE:
#         print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {message_text}")  # –õ–æ–≥
#         if not message_text.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã
#             await context.bot.send_message(chat_id=user_id,
#                                            text="–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#             return STEP_EDIT_PHONE
#
#         registration = await sync_to_async(UserRegistration.objects.filter(user_id=user_id).first)()
#         registration.phone = message_text.strip()
#         registration.is_registered = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#         await sync_to_async(registration.save)()
#         await context.bot.send_message(chat_id=user_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
#
#         # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
#         context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         print("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # –õ–æ–≥
#         return ConversationHandler.END
#
#     return ConversationHandler.END
