from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)
from bot_app.models import UserRegistration
from asgiref.sync import sync_to_async
from bot_app.templates.webapp.profile.profile_date import show_user_info

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
STEP_REGISTER_NAME = 1
STEP_EDIT_NAME = 2


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
async def store_registration_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    message_text = update.message.text

    try:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{message_text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        registrations = await sync_to_async(list)(UserRegistration.objects.filter(user_id=user_id))

        if message_text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§":
            if registrations:
                registration = registrations[0]
                if registration.is_registered:
                    await show_user_info(update, context)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return ConversationHandler.END
            else:
                keyboard = [
                    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                    reply_markup=reply_markup,
                )
                return ConversationHandler.END

        elif message_text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
            if not registrations:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
                return ConversationHandler.END

            context.user_data["step"] = "edit_name"
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
            return STEP_EDIT_NAME

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ store_registration_handler: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
async def start_registration_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    context.user_data["step"] = "register_name"
    return STEP_REGISTER_NAME


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async def register_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    name = update.message.text

    try:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è: {name}.")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(UserRegistration.objects.update_or_create)(
            user_id=user_id, defaults={"name": name, "is_registered": True}
        )

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        )
        return ConversationHandler.END

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ register_name_handler: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
