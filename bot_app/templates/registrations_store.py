from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from bot_app.models import UserRegistration
from bot_app.buttons_store import main_markup, profile_btn
from asgiref.sync import sync_to_async

async def store_registration_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    message_text = update.message.text

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registration, created = await sync_to_async(UserRegistration.objects.get_or_create)(user_id=user_id)

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"Received message: {message_text}")
    print(f"Current registration step: {registration.step}")

    if message_text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        registration.step = None
        registration.is_registered = False
        await sync_to_async(registration.save)()

        await update.message.reply_text(
            "***–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ üè™ GoaBay***\n"
            "***–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ üìú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ***\n\n"
            "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚úçÔ∏è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:_",
            parse_mode='MarkdownV2'
        )
        return 1  # NAME

    if registration.is_registered and registration.step is None:
        await update.message.reply_text('–í—ã –≤–æ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å.', reply_markup=profile_btn)
        return ConversationHandler.END

    if registration.step is None:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await update.message.reply_text(
            "***–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ üè™ GoaBay***\n"
            "***–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ üìú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ***\n\n"
            "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚úçÔ∏è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:_",
            parse_mode='MarkdownV2'
        )
        registration.step = 'name'
        await sync_to_async(registration.save)()
        return 1  # NAME

    elif registration.step == 'name':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ email
        registration.name = message_text
        registration.step = 'email'
        await sync_to_async(registration.save)()
        await update.message.reply_text(
            "*–û—Ç–ª–∏—á–Ω–æ üëç*\n\n"
            "_–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ üìß –≤–∞—à email:_",
            parse_mode='MarkdownV2'
        )
        return 2  # EMAIL

    elif registration.step == 'email':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        registration.email = message_text
        registration.step = 'phone'
        await sync_to_async(registration.save)()
        await update.message.reply_text(
            "*–û—Ç–ª–∏—á–Ω–æ üëç*\n\n"
            "_–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ‚òéÔ∏è –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:_",
            parse_mode='MarkdownV2'
        )
        return 3  # PHONE

    elif registration.step == 'phone':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration.phone = message_text
        registration.is_registered = True
        await sync_to_async(registration.save)()

        user_info = (f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                     f"–ò–º—è: {registration.name}\n"
                     f"Email: {registration.email}\n"
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {registration.phone}\n\n"
                     "‚òëÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ!")
        user_info = user_info.replace('!', '\!')
        await update.message.reply_text(user_info, parse_mode='MarkdownV2')
        await update.message.reply_text('üë≥‚Äç‚ôÄÔ∏è –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å:', reply_markup=profile_btn)
        return ConversationHandler.END

    else:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"Unknown step or command: {registration.step}, message: {message_text}")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
