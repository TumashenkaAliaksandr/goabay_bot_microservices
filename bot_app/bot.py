import os

import django

from bot_app.templates.webapp.answers.answer_money import get_currency_rates
from bot_app.templates.webapp.buttons.buttons import reply_markup_pay, back_button_go, offerta_button, \
    order_calculation_pay, back_button_cal, back_qw_answ_button_main, qw_answ_btn_main, track_button, back_gifts_button_main, gifts_btn_main
from bot_app.templates.webapp.buttons.buttons_how_working import goa_pay_btn, delivery_btn, warehouse_btn
from bot_app.templates.webapp.parcer import fetch_product_data
from bot_app.templates.webapp.text_files.calculator_info_pay import calculator_info
from bot_app.templates.webapp.text_files.delivery import delivery_info
from bot_app.templates.webapp.text_files.info_pay import payment_info
from bot_app.templates.webapp.text_files.qwe_answ import qwe_answer_info
from bot_app.templates.webapp.text_files.sales_info import sales_info
from bot_app.templates.webapp.text_files.warehouse_info import warehouse_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'goabay_bot.settings')
django.setup()

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, ConversationHandler, filters
from telegram.ext import CallbackQueryHandler
from django.conf import settings
from bot_app.templates.profile_date import profile_button_handler
from bot_app.templates.webapp.buttons.buttons_store import *
from bot_app.templates.registrations_store import store_registration_handler
import logging
import pika


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ RabbitMQ
def send_to_rabbitmq(message: str):
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=settings.RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=settings.RABBITMQ_QUEUE)
    channel.basic_publish(exchange='', routing_key=settings.RABBITMQ_QUEUE, body=message)
    connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    with open('templates/webapp/text_files/welcome.txt', 'r', encoding='utf-8') as file:
        welcome_message = file.read()

    await update.message.reply_text(welcome_message, reply_markup=main_markup)


async def help(update: Update, context: CallbackContext) -> None:
    with open('templates/webapp/text_files/welcome.txt', 'r', encoding='utf-8') as file:
        welcome_message = file.read()

    await update.message.reply_text(welcome_message, reply_markup=main_markup)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: CallbackContext) -> None:
    message = update.message.text
    send_to_rabbitmq(message)

    if message == "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è".', reply_markup=products_btn_india)
    elif message == "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è".', reply_markup=how_we_work_btn)
    elif message == "–°–µ—Ä–≤–∏—Å üîß":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–µ—Ä–≤–∏—Å üîß".', reply_markup=service_btn)
    elif message == "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢".', reply_markup=about_btn)
    elif message == "–ù–∞—à –ë–ª–æ–≥ üìö":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—à –ë–ª–æ–≥ üìö".', reply_markup=blog_btn)
    elif message == "üí≥ –û–ø–ª–∞—Ç–∞":
        await update.message.reply_text('üë≥‚Äç‚ôÇÔ∏è –û–ø–ª–∞—Ç–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥', reply_markup=goa_pay_btn)
    elif message == "üè™ –°–∫–ª–∞–¥ –í –ò–Ω–¥–∏–∏":
        await update.message.reply_text('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª - üè™ –°–∫–ª–∞–¥ –í –ò–Ω–¥–∏–∏', reply_markup=warehouse_btn)
    elif message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üç≥".', reply_markup=main_markup)
    elif message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è".', reply_markup=how_we_work_btn)
    elif message == "‚¨ÖÔ∏è –¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è".', reply_markup=products_btn_india)
    elif message == "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã üèß":
        await update.message.reply_text('üí∞ –û–ø–ª–∞—Ç–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É.\n\n'
                                        'üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üèß –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã', reply_markup=reply_markup_pay)
    elif message == "–†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ üí∞":
        await update.message.reply_text('üìä –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n'
                                        'üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üßÆ –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞', reply_markup=order_calculation_pay)
    elif message == "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åõÔ∏èÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åõÔ∏èÔ∏è".', reply_markup=how_we_work_btn)
    elif message == 'üí∏ –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        await get_currency_rates(update, context)
    elif message == "üöö –î–æ—Å—Ç–∞–≤–∫–∞":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "üöö –î–æ—Å—Ç–∞–≤–∫–∞".', reply_markup=delivery_btn)
    elif message == "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –î–æ—Å—Ç–∞–≤–∫–µ":
        await update.message.reply_text(delivery_info, parse_mode='MarkdownV2')
    elif message == "üèó –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –°–∫–ª–∞–¥":
        await update.message.reply_text(warehouse_info, parse_mode='MarkdownV2')
    elif message == "üó£ –ß–∞–í–æ":
        await update.message.reply_text('‚ÅâÔ∏è –í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç.\n\n'
                                       'üëá –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.', reply_markup=qw_answ_btn_main)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã
    elif message == "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ üìú":
        await update.message.reply_text("üìé üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:", reply_markup=offerta_button)
    elif message == "üëÄ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text("üìé üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:", reply_markup=track_button)
    elif message == "üéÅ –ü–æ–¥–∞—Ä–∫–∏":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ üéÅ –ü–æ–¥–∞—Ä–∫–∏", reply_markup=gifts_btn_main)
    elif message == "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç üë§', reply_markup=profile_btn)
        # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    if message == "üõç –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É üîó –Ω–∞ –¢–æ–≤–∞—Ä üõç")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    elif message.startswith("http://") or message.startswith("https://"):
        product_data = fetch_product_data(message)

        if "error" in product_data:
            await update.message.reply_text(product_data["error"])
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        reply_text = (
            f"*–ò–º—è:* {product_data.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {product_data.get('description', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
            f"*–¶–µ–Ω–∞:* {product_data.get('price', {}).get('current', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} "
            f"(–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {product_data.get('price', {}).get('original', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')})\n"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'image' in product_data:
            await update.message.reply_photo(photo=product_data['image'], caption=reply_text, parse_mode="Markdown")
        else:
            await update.message.reply_text(reply_text, parse_mode="Markdown")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é üõç –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ.")

    # if message == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§":
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    #     user_id = update.message.from_user.id
    #     registration = await sync_to_async(UserRegistration.objects.filter)(user_id=user_id).first()
    #
    #     if registration and registration.name and registration.email and registration.phone:
    #         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    #         await show_user_info(update, context)
    #     else:
    #         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    #         await store_registration_handler(update, context)
    #
    # elif message == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
    #     await store_registration_handler(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if query.data == 'edit_data':
        await query.edit_message_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.")
        context.user_data['step'] = None  # –°–±—Ä–æ—Å —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await store_registration_handler(update, context)
        return

    elif query.data == 'confirm_data':
        await query.edit_message_text("‚úîÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
        await query.edit_message_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: üç≥', reply_markup=profile_btn)
        context.user_data.clear()
        return

    payment_method = query.data

    if payment_method in payment_info:
        text, photo_path = payment_info[payment_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_button_go  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_pay':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await query.message.reply_text("üí∞ –û–ø–ª–∞—Ç–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É.\n\n"
                                       "üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üèß C–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup_pay)
        return

    # –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç–æ–¥—ã
    calculator_method = query.data

    if calculator_method in calculator_info:
        text, photo_path = calculator_info[calculator_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_button_cal  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_calculator':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        await query.message.reply_text('üìä –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ –∏–Ω–¥–∏–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n'
                                        'üìß –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\nüëá üßÆ –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞',
                                        reply_markup=order_calculation_pay)
        return

    # –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç
    qwe_answer_method = query.data

    if qwe_answer_method in qwe_answer_info:
        text, photo_path = qwe_answer_info[qwe_answer_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_qw_answ_button_main # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_qwe_answer':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        await query.message.reply_text('‚ÅâÔ∏è –í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç.\n\n'
                                       'üëá –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                                       reply_markup=qw_answ_btn_main)
        return

        # –ê–∫—Ü–∏–∏
    gifts_method = query.data

    if gifts_method in sales_info:
        print(sales_info[gifts_method])
        text, photo_path = sales_info[gifts_method]
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode='MarkdownV2',
                reply_markup=back_gifts_button_main  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            )
        return

    elif query.data == 'back_gifts':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É üéÅ –ü–æ–¥–∞—Ä–∫–∏
        await query.message.reply_text('üéÅ –ü–æ–¥–∞—Ä–∫–∏\n\n'
                                       'üëá –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                                       reply_markup=gifts_btn_main)
        return

    else:
        error_message = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        try:
            await query.edit_message_text(error_message)
        except Exception as e:
            print(f"Error editing message: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(settings.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    store_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex("^(–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§)$"), store_registration_handler),
            MessageHandler(filters.TEXT & filters.Regex("^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ)$"), store_registration_handler)
        ],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
        },
        fallbacks=[],
    )

    application.add_handler(store_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("üë≥‚Äç‚ôÇÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), profile_button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling()


if __name__ == '__main__':
    main()
