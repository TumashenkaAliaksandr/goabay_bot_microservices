# main.py
import logging
import pika
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext
from django.conf import settings
import django
import asyncio
from buttons import markup, inline_markup_india, inline_markup_how_we_work, inline_markup_service, inline_markup_about, inline_markup_blog

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'goabay_bot.settings')
django.setup()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def send_to_rabbitmq(message: str):
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=settings.RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=settings.RABBITMQ_QUEUE)
    channel.basic_publish(exchange='', routing_key=settings.RABBITMQ_QUEUE, body=message)
    connection.close()

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç –Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.', reply_markup=markup)

async def echo(update: Update, context: CallbackContext) -> None:
    message = update.message.text
    send_to_rabbitmq(message)
    if message == "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è".', reply_markup=inline_markup_india)
    elif message == "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è".', reply_markup=inline_markup_how_we_work)
    elif message == "–°–µ—Ä–≤–∏—Å üîß":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–µ—Ä–≤–∏—Å üîß".', reply_markup=inline_markup_service)
    elif message == "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢".', reply_markup=inline_markup_about)
    elif message == "–ù–∞—à –ë–ª–æ–≥ üìö":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—à –ë–ª–æ–≥ üìö".', reply_markup=inline_markup_blog)

def main() -> None:
    application = Application.builder().token(settings.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(None, echo))  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

    application.run_polling()

if __name__ == '__main__':
    main()
