# main.py
import logging
import pika
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext
from django.conf import settings
import django
import asyncio
from buttons import *

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'goabay_bot.settings')
django.setup()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def send_to_rabbitmq(message: str):
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=settings.RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=settings.RABBITMQ_QUEUE)
    channel.basic_publish(exchange='', routing_key=settings.RABBITMQ_QUEUE, body=message)
    connection.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    with open('welcome.txt', 'r', encoding='utf-8') as file:
        welcome_message = file.read()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–π—Å" –∏ "–ú–∞–≥–∞–∑–∏–Ω"
    start_buttons = [['‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–π—Å', 'üè™ –ú–∞–≥–∞–∑–∏–Ω']]
    main_markup = ReplyKeyboardMarkup(start_buttons, resize_keyboard=True, one_time_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(welcome_message, reply_markup=main_markup)


async def echo(update: Update, context: CallbackContext) -> None:
    message = update.message.text
    send_to_rabbitmq(message)
    if message == "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–π—Å":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–π—Å".', reply_markup=main_markup)
    if message == "üè™ –ú–∞–≥–∞–∑–∏–Ω":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "üè™ –ú–∞–≥–∞–∑–∏–Ω".', reply_markup=main_markup)
    if message == "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è".', reply_markup=products_btn_india)
    elif message == "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è".', reply_markup=how_we_work_btn)
    elif message == "–°–µ—Ä–≤–∏—Å üîß":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–µ—Ä–≤–∏—Å üîß".', reply_markup=service_btn)
    elif message == "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢".', reply_markup=about_btn)
    elif message == "–ù–∞—à –ë–ª–æ–≥ üìö":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—à –ë–ª–æ–≥ üìö".', reply_markup=blog_btn)
    elif message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text('–í—ã –æ–ø–∞–ª–∏ –≤ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìñ".', reply_markup=main_markup)
    elif message == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§":
        await update.message.reply_text('–í—ã –æ–ø–∞–ª–∏ –≤ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§".', reply_markup=profile_btn)


def main() -> None:
    application = Application.builder().token(settings.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(None, echo))  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

    application.run_polling()


if __name__ == '__main__':
    main()
