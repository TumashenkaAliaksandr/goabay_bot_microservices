import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'goabay_bot.settings')
django.setup()

from bot_app.templates.profile_date import profile_button_handler
import logging
import pika
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, ConversationHandler, filters
from django.conf import settings
from telegram.ext import CallbackQueryHandler
from bot_app.buttons_store import *
from bot_app.templates.registrations_store import store_registration_handler


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def send_to_rabbitmq(message: str):
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=settings.RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=settings.RABBITMQ_QUEUE)
    channel.basic_publish(exchange='', routing_key=settings.RABBITMQ_QUEUE, body=message)
    connection.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    with open('welcome.txt', 'r', encoding='utf-8') as file:
        welcome_message = file.read()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(welcome_message, reply_markup=main_markup)


async def echo(update: Update, context: CallbackContext) -> None:
    message = update.message.text
    send_to_rabbitmq(message)
    if message == "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–¢–æ–≤–∞—Ä—ã –∏–∑ –ò–Ω–¥–∏–∏ üë≥‚Äç‚ôÄÔ∏è".', reply_markup=products_btn_india)
    elif message == "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º ‚åöÔ∏è".', reply_markup=how_we_work_btn)
    elif message == "–°–µ—Ä–≤–∏—Å üîß":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–µ—Ä–≤–∏—Å üîß".', reply_markup=service_btn)
    elif message == "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏ üè¢".', reply_markup=about_btn)
    elif message == "–ù–∞—à –ë–ª–æ–≥ üìö":
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—à –ë–ª–æ–≥ üìö".', reply_markup=blog_btn)
    elif message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üç≥".', reply_markup=main_markup)
    elif message == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§":
        await store_registration_handler(update, context)
    if message == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await store_registration_handler(update, context)
    elif message == "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç":
        await update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç.', reply_markup=profile_btn)


async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'edit_data':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['step'] = None  # –°–±—Ä–æ—Å —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await store_registration_handler(update, context)  # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ

    elif query.data == 'confirm_data':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await query.edit_message_text("‚úîÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await query.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: üç≥', reply_markup=profile_btn)
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

    else:
        await query.edit_message_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def main() -> None:
    application = Application.builder().token(settings.BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    # application.add_handler(MessageHandler(None, echo))  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    store_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^(–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§|‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ)$"), store_registration_handler)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, store_registration_handler)],
        },
        fallbacks=[],
    )

    application.add_handler(store_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë≥‚Äç‚ôÇÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("üë≥‚Äç‚ôÇÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), profile_button_handler))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling()


if __name__ == '__main__':
    main()