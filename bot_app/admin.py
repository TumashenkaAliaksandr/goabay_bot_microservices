from django.apps import apps
from django.contrib.auth.models import User, Group
from django.contrib import admin
from django.contrib.admin import AdminSite
from django.utils.safestring import mark_safe
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from bot_app import models
from site_app.admin import ProductImageInline
from .models import Product, News, NewsImage
from .forms import ProductForm


# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–¥–º–∏–Ω–∫–∏
class MyAdminSite(AdminSite):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    site_header = "üêò ‡•ê ‡§®‡§Æ: ‡§∂‡§ø‡§µ‡§æ‡§Ø  GoaBay –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
    site_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º"
    index_title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GoaBay –∞–¥–º–∏–Ω!"

admin_site = MyAdminSite(name="myadmin")

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ User –∏ Group
for model in [User, Group]:
    try:
        admin.site.unregister(model)  # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
    except admin.sites.NotRegistered:
        pass  # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å User –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–¥–º–∏–Ω–∫–µ
class CustomUserAdmin(BaseUserAdmin):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è User
    pass

admin_site.register(User, CustomUserAdmin)
admin_site.register(Group)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–¥–º–∏–Ω–∫–µ

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –∫—Ä–æ–º–µ User –∏ Group
all_models = apps.get_models()

for model in all_models:
    if model not in [User, Group]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        try:
            admin_site.register(model)
        except admin.sites.AlreadyRegistered:
            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏


class WordAdmin(admin.ModelAdmin):
    list_display = ['pk', 'word_gender', 'word']
    list_edit = ['word_gender', 'word']


admin.site.register(models.Words, WordAdmin)


# @admin.register(Product)
# class ProductAdmin(admin.ModelAdmin):
#     form = ProductForm
#     list_display = ('name', 'price', 'image_preview', 'brand', 'category')  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ brand
#     search_fields = ('name', 'brand')  # –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ brand)
#     list_filter = ('price', 'brand')  # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ –∏ –±—Ä–µ–Ω–¥—É
#
#     def image_preview(self, obj):
#         if obj.image:
#             return mark_safe(f'<img src="{obj.image.url}" width="50" height="50" />')
#         return '-'
#
#     image_preview.short_description = 'Image Preview'
class ProductAdmin(admin.ModelAdmin):
    list_display = ('name', 'price', 'is_popular', 'is_new_product', 'image_preview')  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    list_filter = ('category', 'brand', 'is_popular', 'is_new_product')  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—è–º
    search_fields = ('name', 'desc')  # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    prepopulated_fields = {'slug': ('name',)}  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è slug
    inlines = [ProductImageInline]

    def image_preview(self, obj):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ."""
        if obj.image:
            return mark_safe(f'<img src="{obj.image.url}" width="50" height="50" />')
        return '-'

    image_preview.short_description = 'Image Preview'  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏

    def save_model(self, request, obj, form, change):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        super().save_model(request, obj, form, change)

admin.site.register(Product, ProductAdmin)


class NewsImageInline(admin.TabularInline):
    model = NewsImage
    extra = 1
    fields = ("image", "description", "preview")
    readonly_fields = ("preview",)

    def preview(self, obj):
        if obj.image:
            return mark_safe(f'<img src="{obj.image.url}" width="100" height="auto" />')
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    preview.short_description = "–ü—Ä–µ–≤—å—é"

@admin.register(News)
class NewsAdmin(admin.ModelAdmin):
    list_display = ("title", "date")
    search_fields = ("title", "description")
    ordering = ("-date",)
    inlines = [NewsImageInline]