// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ì–æ–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ AM/PM
function updateGoaTime() {
  const now = new Date();
  const goaTime = new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Kolkata' }));
  
  // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
  let hours = goaTime.getHours();
  const minutes = goaTime.getMinutes().toString().padStart(2, '0');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º AM –∏–ª–∏ PM
  const ampm = hours >= 12 ? 'PM' : 'AM';
  hours = hours % 12;
  hours = hours ? hours : 12; // –ß–∞—Å –≤ 12-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const formattedTime = `${hours}:${minutes} ${ampm}`;

  document.getElementById('goa-time').textContent = formattedTime;

  const dayIcon = document.getElementById('day-icon');
  dayIcon.textContent = (goaTime.getHours() >= 6 && goaTime.getHours() < 18) ? 'üåû' : 'üåú';
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ AM/PM
function updateSunTimes() {
  fetch('https://api.sunrisesunset.io/json?lat=15.325556&lng=74.054111')
    .then(response => response.json())
    .then(data => {
      const sunriseUTC = data.results.sunrise;
      const sunsetUTC = data.results.sunset;

      const sunriseTime = convertUTCToLocal(sunriseUTC);
      const sunsetTime = convertUTCToLocal(sunsetUTC);

      document.getElementById('sunrise-time').textContent = sunsetTime; // –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞
      document.getElementById('sunset-time').textContent = sunriseTime; // –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    });
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è UTC –∏–∑ API –≤ –º–µ—Å—Ç–Ω–æ–µ –∏–Ω–¥–∏–π—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+5:30) –∏ —Ñ–æ—Ä–º–∞—Ç AM/PM
function convertUTCToLocal(utcTimeStr) {
  const [time, modifier] = utcTimeStr.split(' ');
  let [hours, minutes, seconds] = time.split(':').map(Number);

  if (modifier === 'PM' && hours !== 12) hours += 12;
  if (modifier === 'AM' && hours === 12) hours = 0;

  const dateUTC = new Date(Date.UTC(1970, 0, 1, hours, minutes, seconds));
  dateUTC.setMinutes(dateUTC.getMinutes() + 330); // +5:30 –¥–ª—è –∏–Ω–¥–∏–π—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

  let localHours = dateUTC.getHours();
  const localMinutes = dateUTC.getMinutes().toString().padStart(2, '0');
  
  const ampm = localHours >= 12 ? 'PM' : 'AM';
  localHours = localHours % 12;
  localHours = localHours ? localHours : 12; // –ß–∞—Å –≤ 12-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

  return `${localHours}:${localMinutes} ${ampm}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
function updateWidget() {
  updateGoaTime();
  updateSunTimes();
}

// –°—Ç–∞—Ä—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
updateWidget();
setInterval(updateWidget, 60000);

// –¢–í–û–ô API-–∫–ª—é—á –æ—Ç OpenWeatherMap
const WEATHER_API_KEY = 'c9aeb88dc3a32f57f5415395da797c10'; 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
function updateWeather() {
  const url = `https://api.openweathermap.org/data/2.5/weather?lat=15.325556&lon=74.054111&appid=${WEATHER_API_KEY}&units=metric&lang=en`;

  fetch(url)
    .then(response => response.json())
    .then(data => {
      const temp = Math.round(data.main.temp); // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
      const iconCode = data.weather[0].icon; // –∫–æ–¥ –∏–∫–æ–Ω–∫–∏
      const description = data.weather[0].description; // –æ–ø–∏—Å–∞–Ω–∏–µ

      document.getElementById('weather-temp').textContent = `${temp}¬∞C`;
      document.getElementById('weather-icon').src = `https://openweathermap.org/img/wn/${iconCode}@2x.png`; // –ò–∫–æ–Ω–∫–∞
      document.getElementById('weather-icon').alt = description;
      document.getElementById('weather-desc').textContent = description.charAt(0).toUpperCase() + description.slice(1);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:', error);
    });
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateWeather();
setInterval(updateWeather, 60 * 60 * 1000); // –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å
